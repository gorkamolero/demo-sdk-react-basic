// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import "./textstyles/fonts.css";
import "./reset.css";
import "./HbIconButton.css";
import React, { createContext, useContext } from "react";
import {
  exists,
  findSetVariantProps,
  makeCompositeDefaultProps,
} from "./_internal_utils";
import { TextPrimitive, IconPrimitive } from "./_internal_primitives";
import { ButtonRoot } from "./_internal_button";

const styles = [
  {
    type: "default",
    layers: {
      "2raK7yRvmH": {
        none: {
          text: "Example button",
        },
      },
      "8CLRfG5L7n": {
        none: {
          role: "img",
          icon: require("./assets/5cd79169-4d72-486a-bd71-20cfa0420bb2@1x.svg"),
          useMask: true,
        },
        hover: {
          useMask: true,
        },
        pressed: {
          useMask: true,
        },
      },
    },
  },
  {
    type: "boolean",
    propName: "column",
    layers: {},
  },
  {
    type: "boolean",
    propName: "noIcon",
    layers: {},
  },
  {
    type: "enum",
    propName: "size",
    values: [
      {
        propValue: "small",
        layers: {
          "8CLRfG5L7n": {
            none: {
              icon: require("./assets/3421457c-3753-4949-b709-b4d47224a029.svg"),
            },
          },
        },
      },
    ],
  },
  {
    type: "boolean",
    propName: "HbIconButtonSelected",
    layers: {
      "8CLRfG5L7n": {
        none: {
          useMask: true,
        },
        pressed: {
          useMask: true,
        },
      },
    },
  },
];

const defaultPropValues = [
  {
    type: "default",
    layers: {},
  },
  {
    type: "boolean",
    propName: "column",
    layers: {},
  },
  {
    type: "boolean",
    propName: "noIcon",
    layers: {},
  },
  {
    type: "enum",
    propName: "size",
    values: [
      {
        propValue: "small",
        layers: {},
      },
    ],
  },
  {
    type: "boolean",
    propName: "HbIconButtonSelected",
    layers: {},
  },
];

const variantPropTypes = [
  {
    type: "boolean",
    propName: "column",
  },
  {
    type: "boolean",
    propName: "noIcon",
  },
  {
    type: "enum",
    propName: "size",
    propValues: ["small"],
  },
  {
    type: "boolean",
    propName: "HbIconButtonSelected",
  },
];

export const HbIconButtonContext = createContext(null);

function HbIconButton(_props) {
  const defaults = useContext(HbIconButtonContext);
  const props = { ...defaults, ..._props };
  const activeVariants = findSetVariantProps(variantPropTypes, props);
  const getCompositeDefaultProps = makeCompositeDefaultProps(
    defaultPropValues,
    activeVariants
  );
  return (
    <ButtonRoot
      {...props}
      key="root"
      addSpacing={true}
      internal={{
        projectId: "WDRq65T88Q",
        styles: styles,
        layerId: "root",
        scope: "RK1ajYQDzn",
        activeVariants: activeVariants,
      }}
    >
      {(getStyle) => (
        <>
          <IconPrimitive
            id={"Icon_8CLRfG5L7n"}
            className={
              "__visly_reset_WDRq65T88Q __visly_scope_RK1ajYQDzn_8CLRfG5L7n"
            }
            key={"8CLRfG5L7n"}
            useMask={getStyle("8CLRfG5L7n", "useMask")}
            src={
              exists(props.icon) ? props.icon : getStyle("8CLRfG5L7n", "icon")
            }
          />
          <TextPrimitive
            id={"text_2raK7yRvmH"}
            className={
              "__visly_reset_WDRq65T88Q __visly_scope_RK1ajYQDzn_2raK7yRvmH"
            }
            key={"2raK7yRvmH"}
            text={
              exists(props.text) ? props.text : getStyle("2raK7yRvmH", "text")
            }
            element={getStyle("2raK7yRvmH", "htmlElement")}
          />
        </>
      )}
    </ButtonRoot>
  );
}

HbIconButton.__variants = [
  {
    name: "column",
    type: "variant",
  },
  {
    name: "noIcon",
    type: "variant",
  },
  {
    name: "size",
    type: "group",
    variants: ["small"],
  },
  {
    name: "HbIconButtonSelected",
    type: "variant",
  },
];

export default HbIconButton;
