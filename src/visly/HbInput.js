// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import "./textstyles/fonts.css";
import "./reset.css";
import "./HbInput.css";
import React, { createContext, useContext } from "react";
import {
  exists,
  findSetVariantProps,
  makeCompositeDefaultProps,
} from "./_internal_utils";
import { ContainerPrimitive } from "./_internal_primitives";
import { Root, InputPrimitive } from "./_internal_input";

const styles = [
  {
    type: "default",
    layers: {
      input: {
        none: {
          placeholderText: "Placeholder",
        },
      },
    },
  },
  {
    type: "enum",
    propName: "size",
    values: [
      {
        propValue: "small",
        layers: {},
      },
      {
        propValue: "medium",
        layers: {},
      },
      {
        propValue: "large",
        layers: {},
      },
      {
        propValue: "super",
        layers: {},
      },
    ],
  },
];

const defaultPropValues = [
  {
    type: "default",
    layers: {},
  },
  {
    type: "enum",
    propName: "size",
    values: [
      {
        propValue: "small",
        layers: {},
      },
      {
        propValue: "medium",
        layers: {},
      },
      {
        propValue: "large",
        layers: {},
      },
      {
        propValue: "super",
        layers: {},
      },
    ],
  },
];

const variantPropTypes = [
  {
    type: "enum",
    propName: "size",
    propValues: ["small", "medium", "large", "super"],
  },
];

export const HbInputContext = createContext(null);

function HbInput(_props) {
  const defaults = useContext(HbInputContext);
  const props = { ...defaults, ..._props };
  const activeVariants = findSetVariantProps(variantPropTypes, props);
  const getCompositeDefaultProps = makeCompositeDefaultProps(
    defaultPropValues,
    activeVariants
  );
  return (
    <Root
      {...props}
      key="root"
      addSpacing={false}
      internal={{
        styles: styles,
        layerId: "root",
        scope: "JhYcCBQMX6",
        activeVariants: activeVariants,
      }}
    >
      {(getStyle) => (
        <>
          <InputPrimitive
            className={"__visly_reset __visly_scope_JhYcCBQMX6_input"}
            key={"input"}
            placeholder={
              exists(props.placeholder)
                ? props.placeholder
                : getStyle("input", "placeholderText")
            }
          />
          <ContainerPrimitive
            key={"UHa5YtKvEG"}
            className={"__visly_reset __visly_scope_JhYcCBQMX6_UHa5YtKvEG"}
            addSpacing={false}
          >
            {props.children}
          </ContainerPrimitive>
        </>
      )}
    </Root>
  );
}

HbInput.__variants = [
  {
    name: "size",
    type: "group",
    variants: ["small", "medium", "large", "super"],
  },
];

export default HbInput;
